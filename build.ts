import { promises as fs } from 'fs'
import Path from 'path'
import MDIT from 'markdown-it'
import MA from 'markdown-it-anchor'

const MD = MDIT('commonmark', {
    html: true,
    linkify: true,
    typographer: true,
}).use(MA)

const readDirR = async (dir: string, files: string[] = []) => {
    const entries = await fs.readdir(dir, { withFileTypes: true })
    const jobs: Array<Promise<any>> = []
    for (const entry of entries) {
        if (entry.isDirectory()) jobs.push(readDirR(Path.join(dir, entry.name), files))
        if (entry.isFile()) files.push(Path.join(dir, entry.name))
    }
    await Promise.all(jobs)
    return files
}

const wrapHtml = (main: string, title: string = '') => `<!-- autogenerated -->
<!DOCTYPE html>
<html>
    <head>
        <title>${title}</title>
        <meta name=viewport content="width=device-width, initial-scale=1">
        <link rel=stylesheet href=//cdn.jsdelivr.net/npm/hack-font@3.3.0/build/web/hack.css>
        <link rel=stylesheet media=print href=/css/print.css>
        <link rel=stylesheet media=screen href=/css/screen.css>
        <link rel=stylesheet href=/css/readable.css>
        <link rel=stylesheet href=//cdn.jsdelivr.net/highlight.js/9.1.0/styles/github.min.css>
        <script type=module src=/js/dark-toggle.js></script>
        <script type=module src=/js/sw-register.js></script>
    </head>
    <body>
        <header>
            <nav>
                <a href=/ >home</a>
                <a href=https://github.com/qwelias/qwelias.github.io>source</a>
            </nav>
            <nav>
                <a href=https://github.com/qwelias>github</a>
            </nav>
        </header>
        <main>
            ${main}
        </main>
    </body>
</html>
`

;(async () => {
    await Promise.all(((await readDirR('docs')).filter(f => f.endsWith('.html')).map(async file => {
        const text = String(await fs.readFile(file))
        if (text.startsWith('<!-- autogenerated -->')) return await fs.unlink(file)
    })))

    await Promise.all(((await readDirR('md')).map(async file => {
        const text = String(await fs.readFile(file))
        const name = file.slice(3, -3)
        const html = wrapHtml(MD.render(text), Path.basename(name))
        const filepath = 'docs/' + name + '.html'
        await fs.mkdir(Path.dirname(filepath), { recursive: true })
        return await fs.writeFile(filepath, html)
    })))
})().catch(reason => {
    console.error(reason)
    process.exit(1)
})
